{"version":3,"sources":["components/Card.js","components/Column.js","components/RegistrationView.js","components/LoginView.js","components/NewColumn.js","components/NewTask.js","App.js","serviceWorker.js","index.js"],"names":["card","cardIndex","onDragStart","columnIndex","deleteTask","className","draggable","e","name","onClick","column","onDragOver","onDrop","deleteColumn","createNewTask","onChange","input","resetFormData","cards","map","Card","key","toggleLogin","toggleRegistrationView","placeholder","registrationView","RegistrationView","createNewColumn","toggleAddColumn","addNewColumnModal","value","App","useState","columns","setColumns","loginView","setLoginView","setRegistrationView","addNewTaskModal","setaddNewTaskModal","setaddNewColumnModal","setInput","toggleModalAddTaskClick","preventDefault","document","getElementById","reset","id","dataTransfer","setData","console","log","currentTarget","task","push","splice","columnName","endingColumnIndex","getData","startingColumnIndex","LoginView","NewTask","NewColumn","newColumn","Column","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4b7d2c1c.chunk.js","sourcesContent":["import React from 'react';\n\nexport default ({\n    card,\n    cardIndex,\n    onDragStart,\n    columnIndex,\n    deleteTask,\n}) => (\n    <div className='card' \n        draggable\n        onDragStart={(e) => onDragStart(e, card.name, cardIndex, columnIndex)}\n    >\n        <span className=\"title\">{card.name}</span>\n        <span><button onClick={e => deleteTask(e, columnIndex, cardIndex)} className='btn deleteTaskButton'>X</button></span>\n\n    </div>\n)\n\n","import React from 'react';\nimport Card from './Card'\n\nexport default ({ \n    column, \n    columnIndex,\n    onDragStart,\n    onDragOver,\n    onDrop,\n    deleteColumn,\n    createNewTask,\n    onChange,\n    input,\n    deleteTask,\n    resetFormData,\n }) => (\n    <div \n        className='column' \n        onDragOver={(e) => onDragOver(e)}\n        onDrop={(e) => onDrop(e, column.name, columnIndex)}\n    >\n        <h2>\n            {column.name}\n            <button className='btn deleteButton'onClick={e => deleteColumn(e, columnIndex)}>X</button>\n\n        </h2>\n        {column.cards.map((card, cardIndex) => (\n            <Card\n                card={card}\n                cardIndex={cardIndex}\n                columnIndex={columnIndex}\n                onDragStart={onDragStart}\n                key={card.name}\n                deleteTask={deleteTask}\n            />\n        ))}\n        \n    </div>\n)","import React from 'react';\n\nexport default ({\n    toggleLogin,\n    toggleRegistrationView,\n}) => (\n\n\n\n    <div className='loginView'>\n                <div className=\"informationView\">\n                    <h2>Why Register? Because Below homie</h2>\n                    Yar Pirate Ipsum\n                    Long boat flogging ballast bring a spring upon her cable belay grog blossom no prey, no pay topgallant nipperkin overhaul. Fathom killick hands heave to Chain Shot spyglass matey cog yardarm snow. Lugger heave down sloop prow hempen halter warp jib hardtack careen dead men tell no tales.\n\n                    Cog draft careen line provost cable splice the main brace spanker black spot grog blossom. No prey, no pay fire in the hole gunwalls starboard yardarm ballast grog blossom Buccaneer marooned gally. Strike colors smartly spike galleon warp lookout yawl bilge schooner ho.\n                    \n                </div>\n\n                <div className=\"credentials\">\n                    <input placeholder='email'/>\n                    <br></br>\n                    <input placeholder='password'/>\n                    <br></br>\n\n                    Please Login or Register\n\n                    <button onClick={e => toggleLogin(e)}>Login</button>\n                    <button onClick={e => toggleRegistrationView(e)}>Register</button>\n                </div>\n\n            </div>\n)","import React from 'react';\nimport RegistrationView from './RegistrationView';\n\nexport default ({ \n    toggleLogin,\n    registrationView,\n    toggleRegistrationView\n}) => (\n\n\n    <div className='loginRegistrationView'>\n        {!registrationView && (\n            <div className='loginView'>\n                    \n                <div className=\"informationView\">\n                    <h1>Welcome to the KanBan Board!</h1>\n                    Paroxysm of global death take root and flourish finite but unbounded worldlets circumnavigated rich in mystery. Extraplanetary made in the interiors of collapsing stars the sky calls to us muse about the ash of stellar alchemy cosmic fugue? Made \n                    in the interiors of collapsing stars the sky calls to us courage of our questions gathered by gravity network of wormholes vastness is bearable only through love? Kindling the energy hidden in matter the sky calls to us something incredible is \n                    waiting to be known descended from astronomers dispassionate extraterrestrial observer kindling the energy hidden in matter and billions upon billions upon billions upon billions upon billions upon billions upon billions.\n\n                </div>\n\n                <div className=\"credentials\">\n                    <input placeholder='email'/>\n                    <br></br>\n                    <input placeholder='password'/>\n                    <br></br>\n                    Please Login or Register\n                    <button onClick={e => toggleLogin(e)}>Login</button>\n                    <button onClick={e => toggleRegistrationView(e)}>Register</button>\n                </div>\n\n            </div>\n        )}\n\n        {registrationView && (\n\n            <RegistrationView\n                toggleLogin={toggleLogin}\n                toggleRegistrationView={toggleRegistrationView}\n            />\n        )}\n    </div>\n)","import React from 'react';\n\nexport default ({ \n    createNewColumn,\n    toggleAddColumn,\n    addNewColumnModal,\n    onChange\n}) => (\n\n    <div className='addTask'>\n        <button className='btn addColumnButton' onClick={e => toggleAddColumn(e)}>\n            Add Column\n        </button>\n        <div className=\"newTasks\">\n\n            {addNewColumnModal && (\n                <div className='modal'> \n                    <div className='modal-main'>\n                        column testing\n                        <input onChange={onChange} placeholder='New Task'></input>\n                        <button onClick={e => createNewColumn(e)}>Add New Column</button>\n                        <button onClick={e => toggleAddColumn(e)}>Close</button>\n\n                    </div>\n                </div>\n            )}\n        </div>\n    </div>\n)","import React from 'react';\n\nexport default ({ \n    createNewTask,\n    onChange,\n    input,\n}) => (\n    \n    <div className='addTask'>\n        <h1>The Kanban Board!</h1>\n        <input className='addNewTask' onChange={onChange} value={input} placeholder='New Task'></input>\n        <button className='addTaskButton btn'onClick={e => createNewTask(e)}>></button>\n\n    </div>\n)","import React, { useState } from 'react';\nimport Column from './components/Column';\nimport LoginView from './components/LoginView';\nimport NewColumn from './components/NewColumn';\nimport NewTask from './components/NewTask';\n\nimport './App.css';\n\nfunction App() {\n\n  const [columns, setColumns] = useState(\n      [\n        {\n          name: 'ToDo',\n          cards: [\n            { name: 'card a'},\n            { name: 'card d'},\n            { name: 'card e'},\n          ]\n        },\n        {\n          name: 'InProgress',\n          cards: [\n            { name: 'card b'}\n          ]\n        },\n        {\n          name: 'Completed',\n          cards: [\n            { name: 'card c'}\n          ]\n        },\n      ] \n    )\n    \n    const [loginView, setLoginView] = useState(false)\n    const [registrationView, setRegistrationView] = useState(false)\n    const [addNewTaskModal, setaddNewTaskModal] = useState(false)\n    const [addNewColumnModal, setaddNewColumnModal] = useState(false)\n\n    const [input, setInput] = useState('')\n    \n\n    const toggleModalAddTaskClick = (e) => {\n      e.preventDefault()\n      setaddNewTaskModal(!addNewTaskModal)\n    }\n\n    const toggleLogin = (e) => {\n      e.preventDefault()\n      setLoginView(!loginView)\n    }\n\n\n    const toggleRegistrationView = (e) => {\n      e.preventDefault();\n      setRegistrationView(!registrationView)\n    }\n\n    const toggleAddColumn = (e) => {\n      e.preventDefault()\n      setaddNewColumnModal(!addNewColumnModal)\n    }\n\n    const resetFormData =  () => {\n      document.getElementById(\"newTaskInput\").reset();\n    }\n    //starting to drag the task\n    const onDragStart = (e, id, cardIndex, columnIndex) => {\n      // console.log('dragstart', id, \"card index:\" + cardIndex)\n      e.dataTransfer.setData('id', id)\n      e.dataTransfer.setData('cardIndex', cardIndex)\n      e.dataTransfer.setData('startingColumnIndex', columnIndex)\n      console.log(\"start ColumnIndex:\" + columnIndex)\n    }\n\n    const onDragOver = (e) => {\n      e.preventDefault()\n    }\n\n    //setting input state through NewTask.js to go through createNewTask below\n    const onChange = (e) => {\n      setInput(e.currentTarget.value);\n    }\n\n    // inputting new task, takes onChange above\n    const createNewTask = (e) => {\n      e.preventDefault()\n\n      let task = {\n        name: input,\n        key: input,\n      }\n\n      columns[0].cards.push(task)\n\n      toggleModalAddTaskClick(e)\n      setInput('')\n      console.log(input)\n    }\n\n    const deleteTask =(e, columnIndex, cardIndex) => {\n      e.preventDefault()\n\n      columns[columnIndex].cards.splice(cardIndex,1)\n\n      setColumns([\n        ...columns,\n      ]) \n    }\n\n    const createNewColumn = (e) => {\n      e.preventDefault()\n\n      let newColumn = {\n        name: input,\n        cards: []\n      }\n      columns.push(newColumn)\n      toggleAddColumn(e)\n    }\n\n    const deleteColumn =(e, columnIndex) => {\n      e.preventDefault()\n      // let startingColumnIndex = e.dataTransfer.getData('startingColumnIndex')\n      columns.splice(columnIndex, 1)\n      // console.log(e, columnIndex)  \n\n      setColumns([\n        ...columns,\n      ]) \n    }\n\n    //Dropping the draggable task to a different column pushing/splicing task\n    const onDrop = (e, columnName, endingColumnIndex) => {\n      let id = e.dataTransfer.getData('id');\n      let cardIndex = e.dataTransfer.getData('cardIndex')\n      let startingColumnIndex = e.dataTransfer.getData('startingColumnIndex')\n\n      let newCard = columns[startingColumnIndex].cards\n      // console.log(newCard[cardIndex])\n\n      let task = {\n        name: id,\n        key: id,\n        cardIndex: cardIndex\n      }\n\n      newCard.splice(cardIndex, 1)\n      columns[endingColumnIndex].cards.push(task)\n\n      setColumns([\n        ...columns,\n      ])  \n    }\n\n  return (\n    <div className=\"App\">\n      {!loginView && (\n              <LoginView \n              toggleLogin={toggleLogin}\n              registrationView={registrationView}\n              toggleRegistrationView={toggleRegistrationView}\n            />\n      )}\n\n      {loginView && (\n        <div className='loggedIn'>\n\n              <NewTask \n                createNewTask={createNewTask}\n                onChange={onChange}\n                input={input}\n                resetFormData={resetFormData}\n              />\n              <NewColumn\n                toggleAddColumn={toggleAddColumn}\n                addNewColumnModal={addNewColumnModal}\n                createNewColumn={createNewColumn}\n                onChange={onChange}\n              />\n              <div className='columnGrid'>\n                {columns.map((column, columnIndex) => (\n                    <Column \n                      onDrop={onDrop}\n                      column={column}\n                      columnIndex={columnIndex}\n                      onDragStart={onDragStart}\n                      onDragOver={onDragOver}\n                      toggleModalAddTaskClick={toggleModalAddTaskClick}\n                      deleteColumn={deleteColumn}\n                      createNewTask={createNewTask}\n                      onChange={onChange}\n                      input={input}\n                      deleteTask={deleteTask}\n                      resetFormData={resetFormData}\n                    />\n                  ))\n                }\n              </div>\n        </div>\n\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}